    // apples: Vec<Apple>,
    // apple_timer: u32,

// Regerate apples ------------------------------------------------------------------------
        // let mut rng = rand::thread_rng();
        // if self.apple_timer > 0 {
        //     self.apple_timer -= 1;
        // } else if self.apples.len() < 8 {
        //     self.apples.push(Apple {
        //         pos: Vec2 {
        //             x: rng.gen_range(8.0..(W - 8.0)),
        //             y: H + 8.0,
        //         },
        //         vel: Vec2 {
        //             x: 0.0,
        //             y: rng.gen_range((-4.0)..(-1.0)),
        //         },
        //     });
        //     self.apple_timer = rng.gen_range(30..90);
        // }
        // for apple in self.apples.iter_mut() {
        //     apple.pos += apple.vel;
        // }
        // if let Some(idx) = self
        //     .apples
        //     .iter()
        //     .position(|apple| apple.pos.distance(self.guy.pos) <= CATCH_DISTANCE)
        // {
        //     self.apples.swap_remove(idx);
        //     self.score += 1;
        // }
        // self.apples.retain(|apple| apple.pos.y > -8.0)
        // Regerate apples ------------------------------------------------------------------------

        // set apple
        // let apple_start = guy_idx + 1;
        // for (apple, (trf, uv)) in self.apples.iter().zip(
        //     trfs[apple_start..]
        //         .iter_mut()
        //         .zip(uvs[apple_start..].iter_mut()),
        // ) {
        //     *trf = AABB {
        //         center: apple.pos,
        //         size: Vec2 { x: 16.0, y: 16.0 },
        //     }
        //     .into();
        //     *uv = getSpriteFromSheet_Demo(DEMO_SPRITE_GROUP as u16, 0, 496, 4, 16, 16);
        //     //SheetRegion::new(0, 0, 496, 4, 16, 16);
        // }
        // let sprite_count = apple_start + self.apples.len();
        // let score_str = self.score.to_string();
        // let text_len = score_str.len();
        // engine.renderer.sprites.resize_sprite_group(
        //     &engine.renderer.gpu,
        //     0,
        //     sprite_count + text_len,
        // );
        // self.font.draw_text(
        //     &mut engine.renderer.sprites,
        //     0,
        //     sprite_count,
        //     &score_str,
        //     Vec2 {
        //         x: 16.0,
        //         y: H - 16.0,
        //     }
        //     .into(),
        //     16.0,
        // );